/**
 * Travlyn API
 * Travlyn is an intelligent travel and city guide that provides interest-based trips in cities and countries. Depending on available time, interests, budget and many other parameters, Travlyn creates personalized routes with additional information about the locations themselves and the sights.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: raphael@muesseler.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package org.travlyn.api

import org.travlyn.api.model.Rating
import org.travlyn.api.model.Trip
import org.travlyn.infrastructure.*
import org.travlyn.local.Application

class TripApi(
    application: Application? = null
) : ApiClient(application = application) {

    /**
     * Search for trips
     *
     * @param searchQuery Search query for trips
     * @return kotlin.Array<Trip>
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun findTrip(searchQuery: String): Array<Trip> {
        val localVariableQuery: MultiValueMap = mapOf("searchQuery" to listOf("$searchQuery"))
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/trip", query = localVariableQuery
        )
        val response = request<Array<Trip>>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<Trip>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )
            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     * Generate a Trip
     *
     * @param userId The user who generates the trip
     * @return Trip
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun generateTrip(
        userId: Long,
        cityId: Long,
        tripName: String,
        isPrivate: Boolean,
        stopIds: Array<Int>
    ): Trip {
        val localVariableQuery: MultiValueMap =
            mapOf(
                "userId" to listOf("$userId"),
                "cityId" to listOf("$cityId"),
                "tripName" to listOf(tripName),
                "privateFlat" to listOf("$isPrivate"),
                "privateFlat" to listOf("$stopIds")
            )
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/trip", query = localVariableQuery
        )
        val response = request<Trip>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Trip
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )
            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     * Get Trip by ID
     *
     * @param tripId ID of trip to return
     * @return Trip
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun getTripByID(tripId: Long): Trip {

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/trip/{tripId}".replace("{" + "tripId" + "}", "$tripId")
        )
        val response = request<Trip>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Trip
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )
            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     * Get all Trips of user
     *
     * @param userId ID of the user whose trips are to be returned
     * @return kotlin.Array<Trip>
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun getTripsByUserId(userId: Long): Array<Trip> {

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/user/{userId}/trips".replace("{" + "userId" + "}", "$userId")
        )
        val response = request<Array<Trip>>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<Trip>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )
            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     * Rate a trip
     *
     * @param tripId ID of the trip that will be rated
     * @param rating Rating to be created
     * @return void
     */
    suspend fun rateTrip(tripId: Long, rating: Rating): Unit {
        val localVariableQuery: MultiValueMap = mapOf("rating" to listOf("$rating"))
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/trip/{tripId}".replace("{" + "tripId" + "}", "$tripId"), query = localVariableQuery
        )
        val response = request<Any?>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )
            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     * Update a trip
     *
     * @param trip Updated trip
     * @return void
     */
    suspend fun updateTrip(trip: Trip) {
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/trip"
        )
        val response = request<Any?>(
            localVariableConfig,
            body = trip
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )
            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

}
